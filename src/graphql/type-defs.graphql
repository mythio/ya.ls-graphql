directive @auth(requires: Role = REVIEWER) on FIELD_DEFINITION | OBJECT

enum Role {
	ADMIN
	USER
	USER_UNAUTH
	REVIEWER
}

type UserDetail {
	_id: ID!
	name: String!
	emailAddress: String!
	shortIds: [String!]!
	roles: [Role!]!
}

type User {
	_id: ID!
	name: String!
	emailAddress: String!
}

type ShortUrlDetail {
	_id: ID!
	originalUrl: String!
	shareWith: [User!]
	createdBy: User
}

type ShortUrl {
	_id: ID!
	originalUrl: String!
	shareWith: [User!]
}

type Tokens {
	accessToken: String!
	refreshToken: String!
}

type CreateUserResp {
	user: User!
	tokens: Tokens!
}

type LoginUserResp {
	user: User!
	tokens: Tokens!
}

type MeResp {
	user: UserDetail!
}

type EditRoleResp {
	user: UserDetail!
}

type Query {
	me: MeResp! @auth(requires: USER_UNAUTH)

	login(emailAddress: String!, password: String!): LoginUserResp!

	expandUrl(_id: ID!): ShortUrlDetail! @auth
}

type Mutation {
	createUser(name: String!, emailAddress: String!, password: String!): CreateUserResp!

	shortenUrl(originalUrl: String!, shareWith: [String!]): ShortUrl! @auth

	editRole(userId: ID!, role: Role!): EditRoleResp! @auth(requires: ADMIN)

	deleteUser(userId: ID!): String! @auth(requires: USER)
}
