directive @auth(requires: Role = REVIEWER) on FIELD_DEFINITION | OBJECT

enum Role {
	ADMIN
	USER
	REVIEWER
}

type UserDetail {
	_id: ID!
	name: String!
	emailAddress: String!
	shortIds: [ShortUrl!]
	roles: [String!]
}

type User {
	_id: ID!
	name: String!
	emailAddress: String!
}

type ShortUrlDetail {
	_id: String!
	originalUrl: String!
	shareWith: [User!]
	createdBy: User
}

type ShortUrl {
	shortId: String!
	originalUrl: String!
	shareWith: [ID!]
}

type CreateUserResp {
	user: User!
	tokens: Tokens!
}

type LoginUserResp {
	user: User!
	tokens: Tokens!
}

type MeResp {
	user: UserDetail!
}

type Tokens {
	accessToken: String!
	refreshToken: String!
}

type Query {
	
	me: MeResp! @auth

	login(
		emailAddress: String!
		password: String!
	): LoginUserResp!

	expandUrl(
		shortId: String!
	): ShortUrlDetail! @auth
}

type Mutation {
	
	createUser(
		name: String!
		emailAddress: String!
		password: String!
	): CreateUserResp!

	shortenUrl(
		originalUrl: String!
		shareWith: [ID!]
	): ShortUrl! @auth

	editRole(
		userId: ID!
		role: Role!
	): UserDetail! @auth(requires: ADMIN)

	deleteUser(
		userId: ID!
	): String! @auth(requires: USER)
}
