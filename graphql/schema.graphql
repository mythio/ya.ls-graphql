directive @auth(requires: Role = REVIEWER) on FIELD_DEFINITION | OBJECT

enum Role {
  ADMIN
  USER
  REVIEWER
}

type UserDetail {
  userId: ID!
  name: String!
  emailAddress: String!
  shortIds: [ShortUrl!]
  isAdmin: Boolean!
  isVerified: Boolean!
}

type User {
  userId: ID!
  name: String!
  emailAddress: String!
  isVerified: Boolean!
}

type ShortUrlDetail {
  shortId: String!
  originalUrl: String!
  shareWith: [User!]
  createdBy: User
}

type ShortUrl {
  shortId: String!
  originalUrl: String!
  shareWith: [ID!]
}

type AuthData {
  token: String!
  userId: ID!
}

type Query {
  me: UserDetail! @auth(requires: USER)
  login(emailAddress: String!, password: String!): AuthData!
  expandUrl(shortId: String!): ShortUrlDetail! @auth
}

type Mutation {
  createUser(name: String!, emailAddress: String!, password: String!): User!
  verifyUser(token: String): Boolean
  shortenUrl(originalUrl: String!, shareWith: [ID!]): ShortUrl! @auth
  editPrivilege(userId: ID!, isAdmin: Boolean!): UserDetail!
    @auth(requires: ADMIN)
  deleteUser(userId: ID!): String! @auth(requires: USER)
}
